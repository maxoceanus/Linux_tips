#learn g++


生成可执行代码的流程图：
	cpp源代码 .cpp
	   ||
	   \/
	 编译器
	   ||
	   \/
	汇编代码 .s
	   ||
	   \/
	 汇编器
	   ||
	   \/
	目标代码 .o
	   ||
	   \/
	 链接器
	   ||
	   \/
.o代码=> 可执行程序 <=库文件


编译过程：分为编译和汇编两个阶段

	编译：包含两个主要阶段
		编译预处理：读取程序，对其中的伪指令（以#开头的指令）和特殊符号进行处理
		编译、优化阶段：一部分是优化中间代码；一部分是针对目标代码的生成进行优化
	汇编：将汇编语言代码翻译成目标机器指令的过程，目标文件由段组成，至少有两个段
		（1）代码段：主要包含程序的指令
		（2）数据段：主要存放程序中要用到的各种全局变量或静态的数据

链接过程：将相关的目标文件彼此相连接，使所有目标文件成为一个能够被操作系统装入执行的统一整体，可分为两种
	（1）静态链接：函数的代码从静态链接库中被拷贝到最终的可执行程序中
	（2）动态链接：函数代码被放入某个共享目标文件中，链接程序记录共享对象的信息


GCC/G++的编译链接

           =============== GCC/G++总控程序================
	  ||             ||              ||              ||
	  \/             \/              \/              \/
	预编译		编译		汇编		链接
    ==>	cpp	==>	ccl	==>	as	==>	ld	==>	*.exe
   |	       |               |               |	       |
.cpp源文件   .i文件	   .s汇编程序       .o目标文件	   可执行文件



GCC/G++常用命令行编译命令:

1.g++ -E source_file.cpp
-E，只执行到预编译，直接输出预编译的结果

2.g++ -S source_file.cpp
-S，只执行到源代码到汇编代码的转换，输出汇编代码

3.g++ -c source_file.cpp
-c，只执行到编译，输出目标文件

4.g++ (-E/S/c) source_file.cpp -o output_filename
-o，指定输出文件名，可以配合以上三种标签使用

5.g++ -g source_file.cpp
-g，生成可供调试用的执行文件，可以在gdb中运行

6.g++ -O source_file.cpp
-O，编译器对代码进行自动优化编译，输出效率更高的可执行文件

7.gcc source.file.c -L/path/tolib -lxxx -I/path/to/include
-l，指定所使用到的函数库，本例中链接器会尝试连接名为libxxx.a的函数库
-L，指定函数库所在的文件夹，本例中链接器会尝试搜索/path/to/lib文件夹
-I，指定头文件所在的文件夹，本例中预编译器会尝试搜索/path/to/include文件夹


附加发现：
1.将某个类分为.h文件和.cpp文件，用.cpp文件生成的.o目标文件可以和主函数main.cpp生成的.o文件链接，生成可执行文件
2.将某个类只使用.h文件保存生成.o目标文件，无法和main.o生成可执行文件


