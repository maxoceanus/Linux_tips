3. 文本处理

使用shell处理文本时常用的工具：find/grep/xargs/sort/uniq/tr/cut/paste/wc/sed/awk

===============================================================================

3.1 find文件查找

-查找txt和pdf文件：find . \( -name "*.txt" -o -name "*.pdf" \) -print

-正则方式查找.txt和pdf：find . -regex ".*\(\.txt|\.pdf\)$"

-查找所有非txt文件：find . ! -name "*.txt" -print

-指定搜索深度，打印出当前目录的文件：find . -maxdepth 1 -type f

3.1.1 定制搜索

1）按类型搜索

-列出所有目录：find . -type d -print（-type：f文件、l符号连接、d目录）
-file可以检查文件具体类型：file filename
-查找本地目录下所有二进制文件：ls -lrt | awk '{print $9}' | xargs file | grep ELF |ark '{print $1}' | tr -d ':'

2）按时间搜索

-atime 访问时间（单位是天，分钟单位则是-amin，以下类似）
-mtime 修改时间（内容被修改）
-ctime 变化时间（元数据或权限变化）

-最近第7天被访问的所有文件：find . -atime 7 -type f -print
-最近7天被访问过的所有文件：find . -atime -7 -type f -print
-查询7天前被访问过的所有文件：find . -atime +7 -type f -print

3）按大小搜索

-寻找大于2k的文件：find . -type f -size +2k(/2M/2G)

4）按权限查找

-寻找具有可执行权限的所有文件：find . -type f -perm 755 -print

5）按用户查找

-寻找某用户拥有的文件：find . -type f -user username -print


3.1.2 找到后的后续动作

1）删除
-删除当前目录下的所有swp文件：find . -type f -name "*.swp" -delete
另一种写法：find . -type f -name "*.swp" | xargs rm

2）执行动作（强大的exec）
-将当前目录下的所有权变更为userB：find . -type f -user userA -exec chown userB {} \;
注：{}是一个特殊的字符串，每一个匹配的文件，{}会被替换成相应的文件名

-将找到的文件全都copy到另一个目录：find . -type f -mtime +10 -name "*.txt" -exec cp {} OLD \;

3）结合多个命令
可以将多个命令写成一个脚本，然后-exec调用时执行脚本即可
-exec ./commands.sh {} \;

3.1.3 -print的定界符
默认使用\n作为文件定界符；
-printO 使用”\O"作为文件定界符，可以搜索包含空格的文件

================================================================================================

3.2 grep文本搜索

-默认访问匹配行：grep match_patten file

常用参数：
-o：只输出匹配的文本行
-v：只输出没有匹配的文本行
-c：统计文件中包含文本的次数
-n：打印匹配的行号
-i：搜索时忽略大小写
-l：只打印文件名

-在多级目录中对文本递归搜索：grep "class" . -R -n

-匹配多个模式：grep -e "class" -e "virtual" file

==========================================================================

3.3 xargs命令行参数转换

xargs能够将输入数据转化为特定命令的命令行参数

-将多行输出转化为单行输出：cat file.txt | xargs

-将单行转化为多行输出：cat single.txt | xargs -n 3（-n指定每行显示的字段数）

============================================================================

3.4 sort排序

字段说明：
-n：按数字进行排序
-d：按字典序进行排序
-r：逆序排序
-k N：指定按第N列排序

示例：sort -nrk 1 data.txt

=============================================================================

3.5 uniq消除重复行

-消除重复行：sort unsort.txt | uniq

-统计各行在文件中出现的次数：sort unsort.txt | uniq -c

-找出重复行：sort unsort.txt | uniq -d

================================================================================

3.6 用tr进行转换

使用方法：tr '[:class:]' '[:class:]'

-通用用法：
echo 12345 | tr '0-9' '9876543210'	//加解密转换，替换对应字符
cat text | tr '\t' ' '			//制表符转空格

-tr删除字符
cat file | tr -d '0-9'			//删除所有数字

-使用-c求补集
cat file | tr -c '0-9'			//获取文件中所有非数字
cat file | tr -d -c '0-9 \n'		//删除非数字数据

-使用-s压缩文本中出现的重复字符，最常用于压缩多余空格
cat file | tr -s ' '

-可作用字符类：字母与数字、字母、数字、空白字符、小写、大写、控制字符、可打印字符


==================================================================================

3.7 cut按列切分文本

-截取文件的第2列和第4列
cut -f2,4 filename

-截取文件除第3列的所有列
cut -f3 --complement filename

-使用-d指定定界符
cut -f2 -d";" filename'

-cut取得范围：
	N-：第N个字符到结尾
	-M：第1个字符到M个字符
	N-M：N到M个字段

-cut取得单位：
	-b：以字节为单位
	-c：以字符为单位
	-f：以字段为单位（使用定界符）
示例：
cut -c1-5 file			//打印第1到5个字符
cut -c-2 file			//打印前2个字符


=================================================================================

3.8 paste按列拼接文本

示例：
cat file1
1
2
cat file2
colin
book
paste file1 file2
1 colin
2 book
默认定界符是制表符，可以用-d指明定界符
paste file1 file2 -d ","
1,colin
2,book

===================================================================================

3.9 wc统计行和字符的工具

-wc -l file		//统计行数
-wc -w file		//统计单词数
-wc -c file		//统计字符数

===================================================================================

3.10 sed文本替换利器


==================================================================================

3.11 awk数据流处理工具














































